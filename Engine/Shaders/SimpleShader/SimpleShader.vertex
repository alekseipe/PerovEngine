#version 460 core

// Vertex input attributes
layout (location = 0) in vec3 vPosition;
layout (location = 1) in vec3 vColour;
layout (location = 2) in vec2 vTexCoords;
layout (location = 3) in vec3 vNormals;
layout (location = 4) in vec3 vTangents;

// Uniforms for transformations
uniform mat4 mesh = mat4(1.0);
uniform mat4 model = mat4(1.0);
uniform mat4 view = mat4(1.0);
uniform mat4 projection = mat4(1.0);

// Outputs to the fragment shader
out vec3 fColour;
out vec2 fTexCoords;
out vec3 fNormals;
out vec3 fVertPos;
out vec3 fViewPos;
out mat3 fTBN;

void main() {
	// Calculate relative position of the vertex within the model
	mat4 relPos = model * mesh;

	// Calculate the final position of the vertex in clip space
	gl_Position = projection * view * relPos * vec4(vPosition, 1.0);

	// Pass vertex color to the fragment shader
	fColour = vColour;

	// Pass texture coordinates to the fragment shader
	fTexCoords = vTexCoords;

	// Calculate and normalize the transformed normal vector
	mat3 normalMatrix = mat3(transpose(inverse(relPos)));
	fNormals = normalize(normalMatrix * vNormals);

	// Calculate the position of the vertex in world space
	fVertPos = vec3(relPos * vec4(vPosition, 1.0f));

	// Calculate the view position of the vertex
	fViewPos = vec3(view * relPos * vec4(vPosition, 1.0f));
	
	// Calculate the TBN matrix for normal mapping
	vec3 bitangent = cross(fNormals, vTangents);
	fTBN = mat3(vTangents, bitangent, fNormals);
}
